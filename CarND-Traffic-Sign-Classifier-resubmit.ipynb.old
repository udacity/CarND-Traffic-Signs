{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Self-Driving Car Engineer Nanodegree\n",
    "\n",
    "## Deep Learning\n",
    "\n",
    "## Project: Build a Traffic Sign Recognition Classifier\n",
    "\n",
    "In this notebook, a template is provided for you to implement your functionality in stages, which is required to successfully complete this project. If additional code is required that cannot be included in the notebook, be sure that the Python code is successfully imported and included in your submission if necessary. \n",
    "\n",
    "> **Note**: Once you have completed all of the code implementations, you need to finalize your work by exporting the iPython Notebook as an HTML document. Before exporting the notebook to html, all of the code cells need to have been run so that reviewers can see the final implementation and output. You can then export the notebook by using the menu above and navigating to  \\n\",\n",
    "    \"**File -> Download as -> HTML (.html)**. Include the finished document along with this notebook as your submission. \n",
    "\n",
    "In addition to implementing code, there is a writeup to complete. The writeup should be completed in a separate file, which can be either a markdown file or a pdf document. There is a [write up template](https://github.com/udacity/CarND-Traffic-Sign-Classifier-Project/blob/master/writeup_template.md) that can be used to guide the writing process. Completing the code template and writeup template will cover all of the [rubric points](https://review.udacity.com/#!/rubrics/481/view) for this project.\n",
    "\n",
    "The [rubric](https://review.udacity.com/#!/rubrics/481/view) contains \"Stand Out Suggestions\" for enhancing the project beyond the minimum requirements. The stand out suggestions are optional. If you decide to pursue the \"stand out suggestions\", you can include the code in this Ipython notebook and also discuss the results in the writeup file.\n",
    "\n",
    "\n",
    ">**Note:** Code and Markdown cells can be executed using the **Shift + Enter** keyboard shortcut. In addition, Markdown cells can be edited by typically double-clicking the cell to enter edit mode."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Step 0: Load The Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Images :  (34799, 32, 32, 3)\n"
     ]
    }
   ],
   "source": [
    "# Load pickled data\n",
    "import pickle\n",
    "\n",
    "# TODO: Fill this in based on where you saved the training and testing data\n",
    "# Below are the details of the training, validation and test data\n",
    "# main_folder is used to reduce typing time!\n",
    "\n",
    "training_file = \"./traffic-signs-data/train.p\"\n",
    "validation_file= \"./traffic-signs-data/valid.p\"\n",
    "testing_file = \"./traffic-signs-data/test.p\"\n",
    "\n",
    "with open(training_file, mode='rb') as f:\n",
    "    train = pickle.load(f)\n",
    "with open(validation_file, mode='rb') as f:\n",
    "    valid = pickle.load(f)\n",
    "with open(testing_file, mode='rb') as f:\n",
    "    test = pickle.load(f)\n",
    "    \n",
    "X_train, y_train = train['features'], train['labels']\n",
    "X_test, y_test = test['features'], test['labels']\n",
    "X_valid, y_valid = valid['features'], valid['labels']\n",
    "print('Images : ', X_train.shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "---\n",
    "\n",
    "## Step 1: Dataset Summary & Exploration\n",
    "\n",
    "The pickled data is a dictionary with 4 key/value pairs:\n",
    "\n",
    "- `'features'` is a 4D array containing raw pixel data of the traffic sign images, (num examples, width, height, channels).\n",
    "- `'labels'` is a 1D array containing the label/class id of the traffic sign. The file `signnames.csv` contains id -> name mappings for each id.\n",
    "- `'sizes'` is a list containing tuples, (width, height) representing the original width and height the image.\n",
    "- `'coords'` is a list containing tuples, (x1, y1, x2, y2) representing coordinates of a bounding box around the sign in the image. **THESE COORDINATES ASSUME THE ORIGINAL IMAGE. THE PICKLED DATA CONTAINS RESIZED VERSIONS (32 by 32) OF THESE IMAGES**\n",
    "\n",
    "Complete the basic data summary below. Use python, numpy and/or pandas methods to calculate the data summary rather than hard coding the results. For example, the [pandas shape method](http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.shape.html) might be useful for calculating some of the summary results. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Provide a Basic Summary of the Data Set Using Python, Numpy and/or Pandas"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training shape = (32, 32, 3)\n",
      "Number of training examples = 34799\n",
      "Number of validation examples = 4410\n",
      "Number of testing examples = 12630\n",
      "Image data shape = (32, 32, 3)\n",
      "Number of classes = 43\n"
     ]
    }
   ],
   "source": [
    "### Replace each question mark with the appropriate value. \n",
    "### Use python, pandas or numpy methods rather than hard coding the results\n",
    "import numpy as np\n",
    "import cv2\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# TODO: Number of training examples\n",
    "n_train = len(X_train)\n",
    "\n",
    "# TODO: Number of validation examples\n",
    "n_validation = len(X_valid)\n",
    "\n",
    "# TODO: Number of testing examples.\n",
    "n_test = len(X_test)\n",
    "\n",
    "# TODO: What's the shape of an traffic sign image?\n",
    "image_shape = X_train.shape[1:4]\n",
    "print(\"Training shape =\", image_shape)\n",
    "\n",
    "# TODO: How many unique classes/labels there are in the dataset.\n",
    "#n_classes = np.unique(y_train)[-1] + 1 # different way of getting the # classes\n",
    "n_classes = len(np.unique(y_train))\n",
    "\n",
    "print(\"Number of training examples =\", n_train)\n",
    "print(\"Number of validation examples =\", n_validation)\n",
    "print(\"Number of testing examples =\", n_test)\n",
    "print(\"Image data shape =\", image_shape)\n",
    "print(\"Number of classes =\", n_classes)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f75e6bd9160>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "### Data exploration visualization goes here.\n",
    "### Feel free to use as many code cells as needed.\n",
    "import random\n",
    "# Visualizations will be shown in the notebook.\n",
    "%matplotlib inline\n",
    "\n",
    "# show image of 10 random data points\n",
    "fig, axs = plt.subplots(1,5, figsize=(15, 6))\n",
    "fig.subplots_adjust(hspace = .2, wspace=.001)\n",
    "axs = axs.ravel()\n",
    "for i in range(5):\n",
    "    index = random.randint(0, len(X_train))\n",
    "    image = X_train[index]\n",
    "    axs[i].axis('off')\n",
    "    axs[i].imshow(image)\n",
    "    axs[i].set_title(y_train[index])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Include an exploratory visualization of the dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "shape in/out: (32, 32, 3) (32, 32, 1, 3)\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f75ad6ae470>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "def random_translate(img):\n",
    "    rows,cols,_ = img.shape\n",
    "    \n",
    "    # x and y directional translation\n",
    "    px = 2\n",
    "    dx,dy = np.random.randint(-px,px,2)\n",
    "    M = np.float32([[1,0,dx],[0,1,dy]])\n",
    "    dst = cv2.warpAffine(img,M,(cols,rows))\n",
    "    dst = dst[:,:,np.newaxis]\n",
    "    return dst\n",
    "\n",
    "X_train_normalized = (X_train - 128)/128\n",
    "\n",
    "test_img = X_train_normalized[1000]\n",
    "test_dst = random_translate(test_img)\n",
    "fig, axs = plt.subplots(1,2, figsize=(10, 3))\n",
    "\n",
    "axs[0].axis('off')\n",
    "axs[0].imshow(test_img.squeeze(), cmap='gray')\n",
    "axs[0].set_title('original')\n",
    "\n",
    "axs[1].axis('off')\n",
    "axs[1].imshow(test_dst.squeeze(), cmap='gray')\n",
    "axs[1].set_title('translated')\n",
    "\n",
    "print('shape in/out:', test_img.shape, test_dst.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Visualize the German Traffic Signs Dataset using the pickled file(s). This is open ended, suggestions include: plotting traffic sign images, plotting the count of each sign, etc. \n",
    "\n",
    "The [Matplotlib](http://matplotlib.org/) [examples](http://matplotlib.org/examples/index.html) and [gallery](http://matplotlib.org/gallery.html) pages are a great resource for doing visualizations in Python.\n",
    "\n",
    "**NOTE:** It's recommended you start with something simple first. If you wish to do more, come back to it after you've completed the rest of the sections. It can be interesting to look at the distribution of classes in the training, validation and test set. Is the distribution the same? Are there more examples of some classes than others?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "shape in/out: (32, 32, 3) (32, 32, 3)\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f75e6e49cf8>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "def random_brightness(img):\n",
    "    shifted = img + 1.0   # shift to (0,2) range\n",
    "    img_max_value = max(shifted.flatten())\n",
    "    max_coef = 2.0/img_max_value\n",
    "    min_coef = max_coef - 0.1\n",
    "    coef = np.random.uniform(min_coef, max_coef)\n",
    "    dst = shifted * coef - 1.0\n",
    "    return dst\n",
    "\n",
    "test_dst = random_brightness(test_img)\n",
    "fig, axs = plt.subplots(1,2, figsize=(10, 3))\n",
    "\n",
    "axs[0].axis('off')\n",
    "axs[0].imshow(test_img.squeeze(), cmap='gray')\n",
    "axs[0].set_title('original')\n",
    "\n",
    "axs[1].axis('off')\n",
    "axs[1].imshow(test_dst.squeeze(), cmap='gray')\n",
    "axs[1].set_title('brightness adjusted')\n",
    "\n",
    "print('shape in/out:', test_img.shape, test_dst.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "shape in/out: (32, 32, 3) (32, 32, 1, 3)\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f75e6df4400>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "def random_scaling(img):   \n",
    "    rows,cols,_ = img.shape\n",
    "    # transform limits\n",
    "    px = np.random.randint(-2,2)\n",
    "    # ending locations\n",
    "    pts1 = np.float32([[px,px],[rows-px,px],[px,cols-px],[rows-px,cols-px]])\n",
    "    # starting locations (4 corners)\n",
    "    pts2 = np.float32([[0,0],[rows,0],[0,cols],[rows,cols]])\n",
    "    M = cv2.getPerspectiveTransform(pts1,pts2)\n",
    "    dst = cv2.warpPerspective(img,M,(rows,cols))\n",
    "    dst = dst[:,:,np.newaxis]\n",
    "    return dst\n",
    "\n",
    "test_dst = random_scaling(test_img)\n",
    "fig, axs = plt.subplots(1,2, figsize=(10, 3))\n",
    "\n",
    "axs[0].axis('off')\n",
    "axs[0].imshow(test_img.squeeze(), cmap='gray')\n",
    "axs[0].set_title('original')\n",
    "\n",
    "axs[1].axis('off')\n",
    "axs[1].imshow(test_dst.squeeze(), cmap='gray')\n",
    "axs[1].set_title('scaled')\n",
    "\n",
    "print('shape in/out:', test_img.shape, test_dst.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "shape in/out: (32, 32, 3) (32, 32, 1, 3)\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f760317f550>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "def random_warp(img):\n",
    "    \n",
    "    rows,cols,_ = img.shape\n",
    "\n",
    "    # random scaling coefficients\n",
    "    rndx = np.random.rand(3) - 0.5\n",
    "    rndx *= cols * 0.06   # this coefficient determines the degree of warping\n",
    "    rndy = np.random.rand(3) - 0.5\n",
    "    rndy *= rows * 0.06\n",
    "\n",
    "    # 3 starting points for transform, 1/4 way from edges\n",
    "    x1 = cols/4\n",
    "    x2 = 3*cols/4\n",
    "    y1 = rows/4\n",
    "    y2 = 3*rows/4\n",
    "\n",
    "    pts1 = np.float32([[y1,x1],\n",
    "                       [y2,x1],\n",
    "                       [y1,x2]])\n",
    "    pts2 = np.float32([[y1+rndy[0],x1+rndx[0]],\n",
    "                       [y2+rndy[1],x1+rndx[1]],\n",
    "                       [y1+rndy[2],x2+rndx[2]]])\n",
    "\n",
    "    M = cv2.getAffineTransform(pts1,pts2)\n",
    "\n",
    "    dst = cv2.warpAffine(img,M,(cols,rows))\n",
    "    \n",
    "    dst = dst[:,:,np.newaxis]\n",
    "    \n",
    "    return dst\n",
    "\n",
    "test_dst = random_warp(test_img)\n",
    "\n",
    "fig, axs = plt.subplots(1,2, figsize=(10, 3))\n",
    "\n",
    "axs[0].axis('off')\n",
    "axs[0].imshow(test_img.squeeze(), cmap='gray')\n",
    "axs[0].set_title('original')\n",
    "\n",
    "axs[1].axis('off')\n",
    "axs[1].imshow(test_dst.squeeze(), cmap='gray')\n",
    "axs[1].set_title('warped')\n",
    "\n",
    "print('shape in/out:', test_img.shape, test_dst.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "X, y shapes: (34799, 32, 32, 3) (34799,)\n",
      "0 : \n",
      "1 : \n",
      "2 : \n",
      "3 : \n",
      "4 : \n",
      "5 : \n",
      "6 : \n",
      "7 : \n",
      "8 : \n",
      "9 : \n",
      "10 : \n",
      "11 : \n",
      "12 : \n",
      "13 : \n",
      "14 : \n",
      "15 : \n",
      "16 : \n",
      "17 : \n",
      "18 : \n",
      "19 : \n",
      "20 : \n",
      "21 : \n",
      "22 : \n",
      "23 : \n",
      "24 : \n",
      "25 : \n",
      "26 : \n",
      "27 : \n",
      "28 : \n",
      "29 : \n",
      "30 : \n",
      "31 : \n",
      "32 : \n",
      "33 : \n",
      "34 : \n",
      "35 : \n",
      "36 : \n",
      "37 : \n",
      "38 : \n",
      "39 : \n",
      "40 : \n",
      "41 : \n",
      "42 : \n",
      "X, y shapes: (34799, 32, 32, 3) (34799,)\n"
     ]
    }
   ],
   "source": [
    "X_train_normalized = (X_train - 128)/128\n",
    "print('X, y shapes:', X_train_normalized.shape, y_train.shape)\n",
    "\n",
    "input_indices = []\n",
    "output_indices = []\n",
    "\n",
    "for class_n in range(n_classes):\n",
    "    print(class_n, ': ', end='')\n",
    "    class_indices = np.where(y_train == class_n)\n",
    "    n_samples = len(class_indices[0])\n",
    "    if n_samples < 50:\n",
    "        for i in range(50 - n_samples):\n",
    "            input_indices.append(class_indices[0][i%n_samples])\n",
    "            output_indices.append(X_train_normalized.shape[0])\n",
    "            new_img = X_train_normalized[class_indices[0][i % n_samples]]\n",
    "            new_img = random_translate(random_scaling(random_warp(random_brightness(new_img))))\n",
    "            X_train_normalized = np.concatenate((X_train_normalized, [new_img]), axis=0)\n",
    "            y_train = np.concatenate((y_train, [class_n]), axis=0)\n",
    "            #if i % 50 == 0:\n",
    "            #    print('|', end='')\n",
    "            #elif i % 10 == 0:\n",
    "            #    print('-',end='')\n",
    "    print('')\n",
    "            \n",
    "print('X, y shapes:', X_train_normalized.shape, y_train.shape)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0\n"
     ]
    },
    {
     "ename": "ValueError",
     "evalue": "low >= high",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-83-a8b052e304ea>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0mpicks\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mi\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m5\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 5\u001b[0;31m     \u001b[0mrnd_index\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrandom\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrandint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlow\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mhigh\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mchoices\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      6\u001b[0m     \u001b[0mpicks\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mchoices\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpop\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrnd_index\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      7\u001b[0m \u001b[0mfig\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msubplots\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m5\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfigsize\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m15\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m6\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32mmtrand.pyx\u001b[0m in \u001b[0;36mmtrand.RandomState.randint (numpy/random/mtrand/mtrand.c:16117)\u001b[0;34m()\u001b[0m\n",
      "\u001b[0;31mValueError\u001b[0m: low >= high"
     ]
    }
   ],
   "source": [
    "choices = list(range(len(input_indices)))\n",
    "print(len(input_indices))\n",
    "picks = []\n",
    "for i in range(5):\n",
    "    rnd_index = np.random.randint(low=0,high=len(choices))\n",
    "    picks.append(choices.pop(rnd_index))\n",
    "fig, axs = plt.subplots(2,5, figsize=(15, 6))\n",
    "fig.subplots_adjust(hspace = .2, wspace=.001)\n",
    "axs = axs.ravel()\n",
    "for i in range(5):\n",
    "    image = X_train_normalized[input_indices[picks[i]]].squeeze()\n",
    "    axs[i].axis('off')\n",
    "    axs[i].imshow(image, cmap = 'gray')\n",
    "    axs[i].set_title(y_train[input_indices[picks[i]]])\n",
    "for i in range(5):\n",
    "    image = X_train_normalized[output_indices[picks[i]]].squeeze()\n",
    "    axs[i+5].axis('off')\n",
    "    axs[i+5].imshow(image, cmap = 'gray')\n",
    "    axs[i+5].set_title(y_train[output_indices[picks[i]]])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f76030be898>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# histogram of label frequency\n",
    "hist, bins = np.histogram(y_train, bins=n_classes)\n",
    "width = 0.8 * (bins[1] - bins[0])\n",
    "center = (bins[:-1] + bins[1:]) / 2\n",
    "plt.bar(center, hist, align='center', width=width)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[180, 1980, 2010, 1260, 1770, 1650, 360, 1290, 1260, 1320, 1800, 1170, 1890, 1920, 690, 540, 360, 990, 1080, 180, 300, 270, 330, 450, 240, 1350, 540, 210, 480, 240, 390, 690, 210, 599, 360, 1080, 330, 180, 1860, 270, 300, 210, 210]\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f760307a828>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "### Data exploration visualization code goes here.\n",
    "### Feel free to use as many code cells as needed.\n",
    "import matplotlib.pyplot as plt\n",
    "import random\n",
    "# Visualizations will be shown in the notebook.\n",
    "%matplotlib inline\n",
    "\n",
    "# Visualization\n",
    "#training data \n",
    "hist_train_y = []\n",
    "hist_train_x = []\n",
    "\n",
    "train_y_list = y_train.tolist()\n",
    "\n",
    "for i in range(0, n_classes):\n",
    "    hist_train_x.append(i)\n",
    "    count = train_y_list.count(i)\n",
    "    hist_train_y.append(count)\n",
    "b_width = 0.9\n",
    "fig, ax = plt.subplots()\n",
    "rects1 = ax.bar(hist_train_x, hist_train_y, b_width, label='Labels')\n",
    "ax.set_xticks(hist_train_x)\n",
    "ax.set_xticklabels(train_y_list)\n",
    "\n",
    "#plt.plot.bar(hist_train_x, hist_train_y, 'b-')\n",
    "print (hist_train_y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f7602f734e0>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.xlabel('Labels')\n",
    "plt.ylabel('Frequency')\n",
    "plt.title('Training Data Set')\n",
    "plt.axis([0, 43, 0, 2200])\n",
    "plt.grid(True)\n",
    "\n",
    "plt.plot(hist_train_x, hist_train_y, 'b-')\n",
    "plt.show()\n",
    "#print (hist_train_y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "X Train Normalized - mean 1.21925099939\n",
      "X Train Normalized - mean 1.21879869422\n"
     ]
    }
   ],
   "source": [
    "## Normalize the train and test datasets to (-1,1)\n",
    "\n",
    "X_train_normalized = (X_train - 128)/128 \n",
    "X_test_normalized = (X_test - 128)/128\n",
    "\n",
    "print(\"X Train Normalized - mean\", np.mean(X_train_normalized))\n",
    "print(\"X Train Normalized - mean\", np.mean(X_test_normalized))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "----\n",
    "\n",
    "## Step 2: Design and Test a Model Architecture\n",
    "\n",
    "Design and implement a deep learning model that learns to recognize traffic signs. Train and test your model on the [German Traffic Sign Dataset](http://benchmark.ini.rub.de/?section=gtsrb&subsection=dataset).\n",
    "\n",
    "The LeNet-5 implementation shown in the [classroom](https://classroom.udacity.com/nanodegrees/nd013/parts/fbf77062-5703-404e-b60c-95b78b2f3f9e/modules/6df7ae49-c61c-4bb2-a23e-6527e69209ec/lessons/601ae704-1035-4287-8b11-e2c2716217ad/concepts/d4aca031-508f-4e0b-b493-e7b706120f81) at the end of the CNN lesson is a solid starting point. You'll have to change the number of classes and possibly the preprocessing, but aside from that it's plug and play! \n",
    "\n",
    "With the LeNet-5 solution from the lecture, you should expect a validation set accuracy of about 0.89. To meet specifications, the validation set accuracy will need to be at least 0.93. It is possible to get an even higher accuracy, but 0.93 is the minimum for a successful project submission. \n",
    "\n",
    "There are various aspects to consider when thinking about this problem:\n",
    "\n",
    "- Neural network architecture (is the network over or underfitting?)\n",
    "- Play around preprocessing techniques (normalization, rgb to grayscale, etc)\n",
    "- Number of examples per label (some have more than others).\n",
    "- Generate fake data.\n",
    "\n",
    "Here is an example of a [published baseline model on this problem](http://yann.lecun.com/exdb/publis/pdf/sermanet-ijcnn-11.pdf). It's not required to be familiar with the approach used in the paper but, it's good practice to try to read papers like these."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Pre-process the Data Set (normalization, grayscale, etc.)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Minimally, the image data should be normalized so that the data has mean zero and equal variance. For image data, `(pixel - 128)/ 128` is a quick way to approximately normalize the data and can be used in this project. \n",
    "\n",
    "Other pre-processing steps are optional. You can try different techniques to see if it improves performance. \n",
    "\n",
    "Use the code cell (or multiple code cells, if necessary) to implement the first step of your project."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "X Train RGB shape: (34799, 32, 32, 3)\n",
      "X Test RGB shape: (12630, 32, 32, 3)\n",
      "X Validate RGB shape: (4410, 32, 32, 3)\n",
      "X Train Grayscale shape: (34799, 32, 32)\n",
      "X Test Grayscale shape: (12630, 32, 32)\n",
      "X Valid Grayscale shape: (4410, 32, 32)\n",
      "1.21925099939\n",
      "1.21879869422\n",
      "Original shape: (34799, 32, 32, 3)\n",
      "Normalized shape: (34799, 32, 32, 3)\n",
      "18\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f754c608400>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Import the required processing modules\n",
    "\n",
    "import random\n",
    "\n",
    "#image_x_shape = X_train.shape\n",
    "\n",
    "### Preprocess the data here. It is required to normalize the data. Other preprocessing steps could include \n",
    "### converting to grayscale, etc.\n",
    "### Feel free to use as many code cells as needed.\n",
    "def conv_rgb2gray(rgb):\n",
    "    return np.dot(rgb, [0.299, 0.587, 0.114])\n",
    "\n",
    "print('X Train RGB shape:', X_train.shape)\n",
    "print('X Test RGB shape:', X_test.shape)\n",
    "print('X Validate RGB shape:', X_valid.shape)\n",
    "\n",
    "\n",
    "if (X_train.shape[3] == 3):\n",
    "    # Grayscale conversion of image\n",
    "    X_train_gray = conv_rgb2gray(X_train)\n",
    "    X_valid_gray = conv_rgb2gray(X_valid)\n",
    "    X_test_gray = conv_rgb2gray(X_test)\n",
    "    print('X Train Grayscale shape:', X_train_gray.shape)\n",
    "    print('X Test Grayscale shape:', X_test_gray.shape)\n",
    "    print('X Valid Grayscale shape:', X_valid_gray.shape)\n",
    "    \n",
    "    \n",
    "    from sklearn import preprocessing\n",
    "    \n",
    "    for i, picture in enumerate(X_train_gray):\n",
    "        X_train_gray[i] = preprocessing.normalize(picture, norm='l2', axis=1, copy=True, return_norm=False)\n",
    "    for i, picture in enumerate(X_valid_gray):\n",
    "        X_valid_gray[i] = preprocessing.normalize(picture, norm='l2', axis=1, copy=True, return_norm=False)\n",
    "    for i, picture in enumerate(X_test_gray):\n",
    "        X_test_gray[i] = preprocessing.normalize(picture, norm='l2', axis=1, copy=True, return_norm=False)\n",
    "\n",
    "    # Another way to normalize\n",
    "    X_train_normalized = (X_train - 128)/128 \n",
    "    X_test_normalized = (X_test - 128)/128\n",
    "    print(np.mean(X_train_normalized))\n",
    "    print(np.mean(X_test_normalized))\n",
    "    \n",
    "    print(\"Original shape:\", X_train.shape)\n",
    "    print(\"Normalized shape:\", X_train_normalized.shape)\n",
    "    \n",
    "    \n",
    "    # Reshape Grayscale Pictures (Add Dimension 1)\n",
    "    X_train_norm = X_train_gray.reshape(X_train.shape[0], X_train.shape[1], X_train.shape[2], 1)\n",
    "    X_valid_norm = X_valid_gray.reshape(X_valid.shape[0], X_valid.shape[1], X_valid.shape[2], 1)\n",
    "    X_test_norm = X_test_gray.reshape(X_test.shape[0], X_test.shape[1], X_test.shape[2], 1)\n",
    "\n",
    "    # Print one random sample image from the training set and the corresponding label\n",
    "    index = random.randint(0, len(X_train)-1)\n",
    "    image = X_train[index].squeeze()\n",
    "\n",
    "    # Print \"before picture\"\n",
    "    plt.figure(figsize=(2,2))\n",
    "    plt.imshow(image, cmap=\"gray\")\n",
    "    print(y_train[index])\n",
    "    \n",
    "    X_train = X_train_norm\n",
    "    X_valid = X_valid_norm\n",
    "    X_test = X_test_norm\n",
    "    \n",
    "    # Save Image Depth in Variable\n",
    "    image_depth = X_train.shape[3]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "RGB shape: (34799, 32, 32, 1)\n",
      "Grayscale shape: (34799, 32, 32, 1)\n"
     ]
    }
   ],
   "source": [
    "### Preprocess the data here.\n",
    "### Feel free to use as many code cells as needed.\n",
    "\n",
    "# Convert to grayscale\n",
    "X_train_rgb = X_train\n",
    "X_train_gry = np.sum(X_train/3, axis=3, keepdims=True)\n",
    "\n",
    "X_test_rgb = X_test\n",
    "X_test_gry = np.sum(X_test/3, axis=3, keepdims=True)\n",
    "\n",
    "print('RGB shape:', X_train_rgb.shape)\n",
    "print('Grayscale shape:', X_train_gry.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Completed Preprocessing\n"
     ]
    }
   ],
   "source": [
    "X_train = X_train_gry\n",
    "X_test = X_test_gry\n",
    "\n",
    "print('Completed Preprocessing')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f7602e7b5f8>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Print one random sample image from the training set and the corresponding label\n",
    "#index = random.randint(0, len(X_train)-1)\n",
    "\n",
    "# Visualize rgb vs grayscale\n",
    "n_rows = 8\n",
    "n_cols = 10\n",
    "offset = 9000\n",
    "fig, axs = plt.subplots(n_rows,n_cols, figsize=(18, 14))\n",
    "fig.subplots_adjust(hspace = .1, wspace=.001)\n",
    "axs = axs.ravel()\n",
    "for j in range(0,n_rows,2):\n",
    "    for i in range(n_cols):\n",
    "        index = i + j*n_cols\n",
    "        image = X_train_rgb[index + offset]\n",
    "        axs[index].axis('off')\n",
    "        #axs[index].imshow(image)\n",
    "    for i in range(n_cols):\n",
    "        index = i + j*n_cols + n_cols \n",
    "        image = X_train_gry[index + offset - n_cols].squeeze()\n",
    "        axs[index].axis('off')\n",
    "        axs[index].imshow(image, cmap='gray')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Un-Shuffled \n",
      "\n",
      "[41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41\n",
      " 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41\n",
      " 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41\n",
      " 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41\n",
      " 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41\n",
      " 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41\n",
      " 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41\n",
      " 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41 41\n",
      " 41 41 41 41 41 41 41 41 41 41 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31\n",
      " 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31\n",
      " 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31\n",
      " 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31\n",
      " 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31\n",
      " 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31\n",
      " 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31\n",
      " 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31\n",
      " 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31\n",
      " 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31\n",
      " 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31\n",
      " 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31 31]\n",
      "\n",
      "Shuffling completed \n",
      "\n",
      "[ 4 16 17 17  2 38  2 42  5 23  8  9  8 23 31  8  2 31  1 28  8 13  4 29 17\n",
      "  5 17 22 12 10 10 12 12  9  1  1 18  9 15 12 12 17  2 13  5 13 35  1 35 30\n",
      " 12 14 11  3 35 17  9 26 36  5 17 17 35  2 35 33 13 26  4 38 41 27 23 16  2\n",
      " 10 31 15  5 25 25 41  8  9 35  3 35  2  3 10 15 13  2 14  6  7 12  5 12 10\n",
      "  4 13 10 12  2 11  8 38 17 18  3 38  2  2 42  7 25 12 10  1  2 11  2 12  9\n",
      " 30  3  6 13 27 13  3  7 42 26 25  2  5  0 25 10 21  2 10 33 38 15  1 12  7\n",
      " 35 27 18  9 10  5  1 10  7 12  4 20  5 13  1  1  4 18  1  3  8  9  3 12 13\n",
      " 18 39 42 35 38 31  5 25 25  8  5  8  2  5  2 23 13 10 12  9 20 35  3 21  9\n",
      "  2  9  2 27  2 25 16  2 20  5  9 24  1  2 25  3 18  1  2 24 15 15 10  9 15\n",
      "  1 41 30 38  1 17 33 33  5 35  1  1  4 35  1 41 15  4 11  3 18  7  3  3  2\n",
      " 38  1 12 25  2  4 16 17 11  5  7 22 38 30 10 26  1  3  2 13 31 18 17  8 40\n",
      " 16  7  8 38  8 31 13  5 12  5  9 12 14 11 13  2 11 13  5 23 20 33 39 11 40\n",
      "  4  4  9  8  3  8  5 12 13 23 17 36 32 38 11  2  4  7 19 34  7 30 10  3  9\n",
      "  1  1 16 28 12  5 22 13 33 25 25 25 12 14  1  8 16  8 21  1 13  4 33 22 12\n",
      "  5  4 35  4  2  5 18 11  4  4 23  8 25  7  3  7 42  1 18 24 17 35 10  2  8\n",
      " 31 11 18 10  1  1 33  5 25 40  8 15  7  3 32  1  5 14 25 15 16 28 10 12 38\n",
      " 35 11  4  1  9  4 38  4 26 10 33  1 25 38  8  9  4 23  4 37 38 30  1 14 38\n",
      " 10 22 38  5  5  4 14 11 18  9 14 37  9 33  9 38 38 12 22 17  4 25 38 30  7\n",
      " 40 38  1 12 12 17  3 13 18 13 18 38 16  5 32  4  3  9 11 40 28  3 30 40  9\n",
      "  6 35 25 25  4  7 16 38  7  1 13 41  1  2  7 28  3  1  2 11 15 28 12  3  8]\n"
     ]
    }
   ],
   "source": [
    "### Preprocess the data here. Preprocessing steps could include normalization, converting to grayscale, etc.\n",
    "### Feel free to use as many code cells as needed.\n",
    "\n",
    "print(\"\\nUn-Shuffled \\n\")\n",
    "print(y_train[0:500])\n",
    "\n",
    "# shuffle the data\n",
    "from sklearn.utils import shuffle\n",
    "\n",
    "X_train, y_train = shuffle(X_train, y_train)\n",
    "\n",
    "print(\"\\nShuffling completed \\n\")\n",
    "print(y_train[0:500])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.0546461022947\n",
      "0.0542052554114\n"
     ]
    }
   ],
   "source": [
    "print(np.mean(X_train))\n",
    "print(np.mean(X_test))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "-0.999573077326\n",
      "-0.999576521442\n"
     ]
    }
   ],
   "source": [
    "## Normalize the train and test datasets to (-1,1)\n",
    "\n",
    "X_train_normalized = (X_train - 128)/128 \n",
    "X_test_normalized = (X_test - 128)/128\n",
    "\n",
    "print(np.mean(X_train_normalized))\n",
    "print(np.mean(X_test_normalized))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "metadata": {},
   "outputs": [],
   "source": [
    "def random_translate(img):\n",
    "    rows,cols,_ = img.shape\n",
    "    \n",
    "    # allow translation up to px pixels in x and y directions\n",
    "    px = 2\n",
    "    dx,dy = np.random.randint(-px,px,2)\n",
    "\n",
    "    M = np.float32([[1,0,dx],[0,1,dy]])\n",
    "    dst = cv2.warpAffine(img,M,(cols,rows))\n",
    "    \n",
    "    dst = dst[:,:,np.newaxis]\n",
    "    \n",
    "    return dst"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Original shape: (34799, 32, 32, 1)\n",
      "Normalized shape: (34799, 32, 32, 1)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<matplotlib.image.AxesImage at 0x7f75fb048898>"
      ]
     },
     "execution_count": 96,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f75fb1d9e80>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f75fb0d2550>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "print(\"Original shape:\", X_train.shape)\n",
    "print(\"Normalized shape:\", X_train_normalized.shape)\n",
    "\n",
    "\n",
    "fig, axs = plt.subplots(1,2, figsize=(10, 3))\n",
    "axs = axs.ravel()\n",
    "\n",
    "axs[0].axis('off')\n",
    "axs[0].set_title('Train original')\n",
    "axs[0].imshow(X_train[0].squeeze(), cmap='gray')\n",
    "\n",
    "axs[1].axis('off')\n",
    "axs[1].set_title('Train normalized')\n",
    "axs[1].imshow(X_train_normalized[0].squeeze(), cmap='gray')\n",
    "\n",
    "fig, axs = plt.subplots(1,2, figsize=(10, 3))\n",
    "axs = axs.ravel()\n",
    "\n",
    "axs[0].axis('off')\n",
    "axs[0].set_title('Test original')\n",
    "axs[0].imshow(X_test[0].squeeze(), cmap='gray')\n",
    "\n",
    "axs[1].axis('off')\n",
    "axs[1].set_title('Test normalized')\n",
    "axs[1].imshow(X_test_normalized[0].squeeze(), cmap='gray')\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Original shape: (34799, 32, 32, 1)\n",
      "Translated shape: (32, 32, 1)\n",
      "Original shape: (12630, 32, 32, 1)\n",
      "Translated shape: (32, 32, 1)\n",
      "shape in/out: (32, 32, 1) (32, 32, 1)\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f75fb028f98>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f75faf9ba20>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "X_train_scaling = random_scaling(X_train[0])\n",
    "X_test_scaling = random_scaling(X_test[0])\n",
    "\n",
    "print(\"Original shape:\", X_train.shape)\n",
    "print(\"Translated shape:\", X_train_scaling.shape)\n",
    "\n",
    "print(\"Original shape:\", X_test.shape)\n",
    "print(\"Translated shape:\", X_test_scaling.shape)\n",
    "\n",
    "fig, axs = plt.subplots(1,2, figsize=(10, 3))\n",
    "axs = axs.ravel()\n",
    "axs[0].axis('off')\n",
    "axs[0].set_title('Train original')\n",
    "axs[0].imshow(X_train[0].squeeze(), cmap='gray')\n",
    "\n",
    "axs[1].axis('off')\n",
    "axs[1].set_title('Train scaled')\n",
    "axs[1].imshow(X_train_scaling.squeeze(), cmap='gray')\n",
    "\n",
    "\n",
    "fig, axs = plt.subplots(1,2, figsize=(10, 3))\n",
    "\n",
    "axs[0].axis('off')\n",
    "axs[0].imshow(X_test[0].squeeze(), cmap='gray')\n",
    "axs[0].set_title('Test original')\n",
    "\n",
    "axs[1].axis('off')\n",
    "axs[1].imshow(X_test_scaling.squeeze(), cmap='gray')\n",
    "axs[1].set_title('Test scaled')\n",
    "\n",
    "print('shape in/out:', X_test[0].shape, X_test_scaling.shape)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Original shape: (34799, 32, 32, 1)\n",
      "Translated shape: (32, 32, 1)\n",
      "Test shape in/out: (12630, 32, 32, 1) (32, 32, 1)\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f75faef88d0>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f75fae64470>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import cv2\n",
    "X_train_translate = random_translate(X_train[0])\n",
    "test_translate = random_translate(X_test[0])\n",
    "print(\"Original shape:\", X_train.shape)\n",
    "print(\"Translated shape:\", X_train_translate.shape)\n",
    "fig, axs = plt.subplots(1,2, figsize=(10, 3))\n",
    "axs = axs.ravel()\n",
    "axs[0].axis('off')\n",
    "axs[0].set_title('Train original')\n",
    "axs[0].imshow(X_train[0].squeeze(), cmap='gray')\n",
    "\n",
    "axs[1].axis('off')\n",
    "axs[1].set_title('Train translated')\n",
    "axs[1].imshow(X_train_translate.squeeze(), cmap='gray')\n",
    "\n",
    "fig, axs = plt.subplots(1,2, figsize=(10, 3))\n",
    "axs = axs.ravel()\n",
    "axs[0].axis('off')\n",
    "axs[0].set_title('Test original')\n",
    "axs[0].imshow(X_test[0].squeeze(), cmap='gray')\n",
    "\n",
    "axs[1].axis('off')\n",
    "axs[1].set_title('Test translated')\n",
    "axs[1].imshow(test_translate.squeeze(), cmap='gray')\n",
    "\n",
    "print('Test shape in/out:', X_test.shape, test_translate.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "shape in/out: (32, 32, 3) (32, 32, 1, 3)\n",
      "Test shape in/out: (12630, 32, 32, 1) (32, 32, 1)\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f75fadc2208>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f75fad28f60>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "train_warped = random_warp(X_train[0])\n",
    "test_warped = random_warp(X_test[0])\n",
    "\n",
    "fig, axs = plt.subplots(1,2, figsize=(10, 3))\n",
    "\n",
    "axs[0].axis('off')\n",
    "axs[0].imshow(X_train[0].squeeze(), cmap='gray')\n",
    "axs[0].set_title('Train original')\n",
    "\n",
    "axs[1].axis('off')\n",
    "axs[1].imshow(train_warped.squeeze(), cmap='gray')\n",
    "axs[1].set_title('Train warped')\n",
    "\n",
    "print('shape in/out:', test_img.shape, test_dst.shape)\n",
    "\n",
    "fig, axs = plt.subplots(1,2, figsize=(10, 3))\n",
    "axs = axs.ravel()\n",
    "axs[0].axis('off')\n",
    "axs[0].set_title('Test original')\n",
    "axs[0].imshow(X_test[0].squeeze(), cmap='gray')\n",
    "\n",
    "axs[1].axis('off')\n",
    "axs[1].set_title('Test warped')\n",
    "axs[1].imshow(test_warped.squeeze(), cmap='gray')\n",
    "\n",
    "print('Test shape in/out:', X_test.shape, test_translate.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "shape in/out: (12630, 32, 32, 1) (32, 32, 1)\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f75fac066d8>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "train_brightness = random_brightness(X_train[0])\n",
    "test_brightness = random_brightness(X_test[0])\n",
    "fig, axs = plt.subplots(1,2, figsize=(10, 3))\n",
    "\n",
    "axs[0].axis('off')\n",
    "axs[0].imshow(X_train[0].squeeze(), cmap='gray')\n",
    "axs[0].set_title('Train original')\n",
    "\n",
    "axs[1].axis('off')\n",
    "axs[1].imshow(train_brightness.squeeze(), cmap='gray')\n",
    "axs[1].set_title('Train brightness adjusted')\n",
    "\n",
    "axs[0].axis('off')\n",
    "axs[0].imshow(X_test[0].squeeze(), cmap='gray')\n",
    "axs[0].set_title('Test original')\n",
    "\n",
    "axs[1].axis('off')\n",
    "axs[1].imshow(test_brightness.squeeze(), cmap='gray')\n",
    "axs[1].set_title('Test brightness adjusted')\n",
    "\n",
    "\n",
    "print('shape in/out:', X_test.shape, test_brightness.shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Model Architecture"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "metadata": {},
   "outputs": [],
   "source": [
    "### Define your architecture here.\n",
    "### Feel free to use as many code cells as needed.\n",
    "### Define your architecture here.\n",
    "### Feel free to use as many code cells as needed.\n",
    "import tensorflow as tf\n",
    "\n",
    "from tensorflow.contrib.layers import flatten\n",
    "#from tensorflow.keras.layers import Flatten\n",
    "#from tf.keras.layers import Flatten\n",
    "#from tf.keras.layers import flatten\n",
    "\n",
    "EPOCHS = 60\n",
    "BATCH_SIZE = 128"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "metadata": {},
   "outputs": [],
   "source": [
    "### LeNet \n",
    "def LeNet(x, keep_prob):    \n",
    "    # Arguments used for tf.truncated_normal, randomly defines variables for the weights and biases for each layer\n",
    "    mu = 0\n",
    "    sigma = 0.1\n",
    "    \n",
    "    # Layer 1: Convolutional. Input = 32x32ximage_depth. Output = 28x28x6.\n",
    "    conv1_W = tf.Variable(tf.truncated_normal(shape=(5, 5, image_depth, 6), mean = mu, stddev = sigma))\n",
    "    conv1_b = tf.Variable(tf.zeros(6))\n",
    "    conv1   = tf.nn.conv2d(x, conv1_W, strides=[1, 1, 1, 1], padding='VALID', name='conv_1') + conv1_b\n",
    "    print (\"Convolution1: \", conv1)\n",
    "    \n",
    "    # Relu Activation\n",
    "    conv1 = tf.nn.relu(conv1)\n",
    "    \n",
    "    # Max Pooling. Input = 28x28x6. Output = 14x14x6.\n",
    "    conv1 = tf.nn.max_pool(conv1, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='VALID')\n",
    "    \n",
    "    \n",
    "    # Layer 2: Convolutional. Output = 10x10x16.\n",
    "    conv2_W = tf.Variable(tf.truncated_normal(shape=(5, 5, 6, 16), mean = mu, stddev = sigma))\n",
    "    conv2_b = tf.Variable(tf.zeros(16))\n",
    "    conv2   = tf.nn.conv2d(conv1, conv2_W, strides=[1, 1, 1, 1], padding='VALID', name='conv_2') + conv2_b\n",
    "    print (\"Convolution2: \", conv2)\n",
    "    \n",
    "    # Relu Activation being done here\n",
    "    conv2 = tf.nn.relu(conv2)\n",
    "\n",
    "    # Max Pooling. Input = 10x10x16. Output = 5x5x16.\n",
    "    conv2 = tf.nn.max_pool(conv2, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='VALID')\n",
    "           \n",
    "    # Flatten. Input = 5x5x16. Output = 400.\n",
    "    fc0   = flatten(conv2)\n",
    "    #fc0   = Flatten()(conv2)\n",
    "    \n",
    "    # Layer 3: Fully Connected. Input = 400. Output = 120.\n",
    "    fc1_W = tf.Variable(tf.truncated_normal(shape=(400, 120), mean = mu, stddev = sigma))\n",
    "    fc1_b = tf.Variable(tf.zeros(120))\n",
    "    fc1   = tf.matmul(fc0, fc1_W) + fc1_b\n",
    "    \n",
    "    # Relu Activation\n",
    "    fc1    = tf.nn.relu(fc1)\n",
    "    # Apply Dropout \n",
    "    fc1 = tf.nn.dropout(fc1, keep_prob)\n",
    "\n",
    "    # Layer 4: Fully Connected. Input = 120. Output = 84.\n",
    "    fc2_W  = tf.Variable(tf.truncated_normal(shape=(120, 84), mean = mu, stddev = sigma))\n",
    "    fc2_b  = tf.Variable(tf.zeros(84))\n",
    "    fc2    = tf.matmul(fc1, fc2_W) + fc2_b\n",
    "    \n",
    "    # Relu Activation\n",
    "    fc2    = tf.nn.relu(fc2)\n",
    "    # Apply Dropout \n",
    "    #fc2 = tf.nn.dropout(fc2, 0.75)\n",
    "\n",
    "    # Layer 5: Fully Connected. Input = 84. Output = 43.\n",
    "    fc3_W  = tf.Variable(tf.truncated_normal(shape=(84, n_classes), mean = mu, stddev = sigma))\n",
    "    fc3_b  = tf.Variable(tf.zeros(n_classes))\n",
    "    logits = tf.matmul(fc2, fc3_W) + fc3_b\n",
    "    \n",
    "    print (logits)\n",
    "    return logits"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Train, Validate and Test the Model"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "A validation set can be used to assess how well the model is performing. A low accuracy on the training and validation\n",
    "sets imply underfitting. A high accuracy on the training set but low accuracy on the validation set implies overfitting."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Convolution1:  Tensor(\"add_19:0\", shape=(?, 28, 28, 6), dtype=float32)\n",
      "Convolution2:  Tensor(\"add_20:0\", shape=(?, 10, 10, 16), dtype=float32)\n",
      "Tensor(\"add_23:0\", shape=(?, 43), dtype=float32)\n"
     ]
    }
   ],
   "source": [
    "### Train your model here.\n",
    "### Calculate and report the accuracy on the training and validation set.\n",
    "### Once a final model architecture is selected, \n",
    "### the accuracy on the test set should be calculated and reported as well.\n",
    "### Feel free to use as many code cells as needed.\n",
    "\n",
    "#import tensorflow.compat.v1 as tf\n",
    "#tf.disable_v2_behavior()\n",
    "\n",
    "# Create Placeholders for X and Y and One-Hot Encode the Labels\n",
    "x = tf.placeholder(tf.float32, (None, 32, 32, image_depth))\n",
    "y = tf.placeholder(tf.int32, (None))\n",
    "one_hot_y = tf.one_hot(y, n_classes)\n",
    "\n",
    "# dropout probability is the probability to keep units\n",
    "keep_prob = tf.placeholder(tf.float32)\n",
    "\n",
    "# Training Pipeline\n",
    "rate = 0.0009\n",
    "\n",
    "logits = LeNet(x, keep_prob)\n",
    "cross_entropy = tf.nn.softmax_cross_entropy_with_logits(logits = logits, labels = one_hot_y)\n",
    "loss_operation = tf.reduce_mean(cross_entropy)\n",
    "optimizer = tf.train.AdamOptimizer(learning_rate = rate)\n",
    "training_operation = optimizer.minimize(loss_operation)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 109,
   "metadata": {},
   "outputs": [
    {
     "ename": "ValueError",
     "evalue": "At least two variables have the same name: Variable_6",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-109-ac494c045310>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0mcorrect_prediction\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mequal\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0margmax\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlogits\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0margmax\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mone_hot_y\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0maccuracy_operation\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreduce_mean\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcast\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcorrect_prediction\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfloat32\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 4\u001b[0;31m \u001b[0msaver\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtrain\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mSaver\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      5\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0mevaluate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_data\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_data\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/opt/conda/lib/python3.6/site-packages/tensorflow/python/training/saver.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, var_list, reshape, sharded, max_to_keep, keep_checkpoint_every_n_hours, name, restore_sequentially, saver_def, builder, defer_build, allow_empty, write_version, pad_step_number, save_relative_paths, filename)\u001b[0m\n\u001b[1;32m   1138\u001b[0m     \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_filename\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfilename\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1139\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mdefer_build\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1140\u001b[0;31m       \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mbuild\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1141\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msaver_def\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1142\u001b[0m       \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_check_saver_def\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/opt/conda/lib/python3.6/site-packages/tensorflow/python/training/saver.py\u001b[0m in \u001b[0;36mbuild\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m   1170\u001b[0m           \u001b[0mname\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_name\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1171\u001b[0m           \u001b[0mrestore_sequentially\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_restore_sequentially\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1172\u001b[0;31m           filename=self._filename)\n\u001b[0m\u001b[1;32m   1173\u001b[0m     \u001b[0;32melif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msaver_def\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_name\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1174\u001b[0m       \u001b[0;31m# Since self._name is used as a name_scope by builder(), we are\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/opt/conda/lib/python3.6/site-packages/tensorflow/python/training/saver.py\u001b[0m in \u001b[0;36mbuild\u001b[0;34m(self, names_to_saveables, reshape, sharded, max_to_keep, keep_checkpoint_every_n_hours, name, restore_sequentially, filename)\u001b[0m\n\u001b[1;32m    668\u001b[0m         \u001b[0munique\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    669\u001b[0m     \"\"\"\n\u001b[0;32m--> 670\u001b[0;31m     \u001b[0msaveables\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_ValidateAndSliceInputs\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnames_to_saveables\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    671\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mmax_to_keep\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    672\u001b[0m       \u001b[0mmax_to_keep\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/opt/conda/lib/python3.6/site-packages/tensorflow/python/training/saver.py\u001b[0m in \u001b[0;36m_ValidateAndSliceInputs\u001b[0;34m(self, names_to_saveables)\u001b[0m\n\u001b[1;32m    553\u001b[0m     \"\"\"\n\u001b[1;32m    554\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnames_to_saveables\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdict\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 555\u001b[0;31m       \u001b[0mnames_to_saveables\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mBaseSaverBuilder\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mOpListToDict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mnames_to_saveables\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    556\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    557\u001b[0m     \u001b[0msaveables\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/opt/conda/lib/python3.6/site-packages/tensorflow/python/training/saver.py\u001b[0m in \u001b[0;36mOpListToDict\u001b[0;34m(op_list)\u001b[0m\n\u001b[1;32m    531\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mname\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mnames_to_saveables\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    532\u001b[0m           raise ValueError(\"At least two variables have the same name: %s\" %\n\u001b[0;32m--> 533\u001b[0;31m                            name)\n\u001b[0m\u001b[1;32m    534\u001b[0m         \u001b[0mnames_to_saveables\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mname\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mvar\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    535\u001b[0m       \u001b[0;31m# pylint: enable=protected-access\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mValueError\u001b[0m: At least two variables have the same name: Variable_6"
     ]
    }
   ],
   "source": [
    "# Model Evaluation\n",
    "correct_prediction = tf.equal(tf.argmax(logits, 1), tf.argmax(one_hot_y, 1))\n",
    "accuracy_operation = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))\n",
    "saver = tf.train.Saver()\n",
    "\n",
    "def evaluate(X_data, y_data):\n",
    "    num_examples = len(X_data)\n",
    "    total_accuracy = 0\n",
    "    sess = tf.get_default_session()\n",
    "    for offset in range(0, num_examples, BATCH_SIZE):\n",
    "        batch_x, batch_y = X_data[offset:offset+BATCH_SIZE], y_data[offset:offset+BATCH_SIZE]\n",
    "        accuracy = sess.run(accuracy_operation, feed_dict={x: batch_x, y: batch_y, keep_prob: 1.0})\n",
    "        total_accuracy += (accuracy * len(batch_x))\n",
    "    return total_accuracy / num_examples"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 105,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Training...\n",
      "\n",
      "EPOCH 1 ...\n",
      "\n",
      "Training Accuracy = 0.123\n",
      "Validation Accuracy = 0.112\n",
      "\n",
      "EPOCH 2 ...\n",
      "\n",
      "Training Accuracy = 0.545\n",
      "Validation Accuracy = 0.513\n",
      "\n",
      "EPOCH 3 ...\n",
      "\n",
      "Training Accuracy = 0.709\n",
      "Validation Accuracy = 0.651\n",
      "\n",
      "EPOCH 4 ...\n",
      "\n",
      "Training Accuracy = 0.793\n",
      "Validation Accuracy = 0.729\n",
      "\n",
      "EPOCH 5 ...\n",
      "\n",
      "Training Accuracy = 0.833\n",
      "Validation Accuracy = 0.767\n",
      "\n",
      "EPOCH 6 ...\n",
      "\n",
      "Training Accuracy = 0.862\n",
      "Validation Accuracy = 0.774\n",
      "\n",
      "EPOCH 7 ...\n",
      "\n",
      "Training Accuracy = 0.881\n",
      "Validation Accuracy = 0.800\n",
      "\n",
      "EPOCH 8 ...\n",
      "\n",
      "Training Accuracy = 0.900\n",
      "Validation Accuracy = 0.828\n",
      "\n",
      "EPOCH 9 ...\n",
      "\n",
      "Training Accuracy = 0.903\n",
      "Validation Accuracy = 0.819\n",
      "\n",
      "EPOCH 10 ...\n",
      "\n",
      "Training Accuracy = 0.917\n",
      "Validation Accuracy = 0.836\n",
      "\n",
      "EPOCH 11 ...\n",
      "\n",
      "Training Accuracy = 0.920\n",
      "Validation Accuracy = 0.853\n",
      "\n",
      "EPOCH 12 ...\n",
      "\n",
      "Training Accuracy = 0.930\n",
      "Validation Accuracy = 0.840\n",
      "\n",
      "EPOCH 13 ...\n",
      "\n",
      "Training Accuracy = 0.935\n",
      "Validation Accuracy = 0.858\n",
      "\n",
      "EPOCH 14 ...\n",
      "\n",
      "Training Accuracy = 0.944\n",
      "Validation Accuracy = 0.865\n",
      "\n",
      "EPOCH 15 ...\n",
      "\n",
      "Training Accuracy = 0.951\n",
      "Validation Accuracy = 0.861\n",
      "\n",
      "EPOCH 16 ...\n",
      "\n",
      "Training Accuracy = 0.954\n",
      "Validation Accuracy = 0.872\n",
      "\n",
      "EPOCH 17 ...\n",
      "\n",
      "Training Accuracy = 0.956\n",
      "Validation Accuracy = 0.880\n",
      "\n",
      "EPOCH 18 ...\n",
      "\n",
      "Training Accuracy = 0.957\n",
      "Validation Accuracy = 0.867\n",
      "\n",
      "EPOCH 19 ...\n",
      "\n",
      "Training Accuracy = 0.961\n",
      "Validation Accuracy = 0.889\n",
      "\n",
      "EPOCH 20 ...\n",
      "\n",
      "Training Accuracy = 0.964\n",
      "Validation Accuracy = 0.882\n",
      "\n",
      "EPOCH 21 ...\n",
      "\n",
      "Training Accuracy = 0.965\n",
      "Validation Accuracy = 0.885\n",
      "\n",
      "EPOCH 22 ...\n",
      "\n",
      "Training Accuracy = 0.969\n",
      "Validation Accuracy = 0.889\n",
      "\n",
      "EPOCH 23 ...\n",
      "\n",
      "Training Accuracy = 0.971\n",
      "Validation Accuracy = 0.890\n",
      "\n",
      "EPOCH 24 ...\n",
      "\n",
      "Training Accuracy = 0.972\n",
      "Validation Accuracy = 0.894\n",
      "\n",
      "EPOCH 25 ...\n",
      "\n",
      "Training Accuracy = 0.974\n",
      "Validation Accuracy = 0.892\n",
      "\n",
      "EPOCH 26 ...\n",
      "\n",
      "Training Accuracy = 0.976\n",
      "Validation Accuracy = 0.887\n",
      "\n",
      "EPOCH 27 ...\n",
      "\n",
      "Training Accuracy = 0.978\n",
      "Validation Accuracy = 0.897\n",
      "\n",
      "EPOCH 28 ...\n",
      "\n",
      "Training Accuracy = 0.978\n",
      "Validation Accuracy = 0.897\n",
      "\n",
      "EPOCH 29 ...\n",
      "\n",
      "Training Accuracy = 0.980\n",
      "Validation Accuracy = 0.903\n",
      "\n",
      "EPOCH 30 ...\n",
      "\n",
      "Training Accuracy = 0.980\n",
      "Validation Accuracy = 0.909\n",
      "\n",
      "EPOCH 31 ...\n",
      "\n",
      "Training Accuracy = 0.982\n",
      "Validation Accuracy = 0.903\n",
      "\n",
      "EPOCH 32 ...\n",
      "\n",
      "Training Accuracy = 0.979\n",
      "Validation Accuracy = 0.904\n",
      "\n",
      "EPOCH 33 ...\n",
      "\n",
      "Training Accuracy = 0.982\n",
      "Validation Accuracy = 0.898\n",
      "\n",
      "EPOCH 34 ...\n",
      "\n",
      "Training Accuracy = 0.982\n",
      "Validation Accuracy = 0.906\n",
      "\n",
      "EPOCH 35 ...\n",
      "\n",
      "Training Accuracy = 0.986\n",
      "Validation Accuracy = 0.914\n",
      "\n",
      "EPOCH 36 ...\n",
      "\n",
      "Training Accuracy = 0.985\n",
      "Validation Accuracy = 0.914\n",
      "\n",
      "EPOCH 37 ...\n",
      "\n",
      "Training Accuracy = 0.985\n",
      "Validation Accuracy = 0.910\n",
      "\n",
      "EPOCH 38 ...\n",
      "\n",
      "Training Accuracy = 0.984\n",
      "Validation Accuracy = 0.920\n",
      "\n",
      "EPOCH 39 ...\n",
      "\n",
      "Training Accuracy = 0.985\n",
      "Validation Accuracy = 0.909\n",
      "\n",
      "EPOCH 40 ...\n",
      "\n",
      "Training Accuracy = 0.986\n",
      "Validation Accuracy = 0.909\n",
      "\n",
      "EPOCH 41 ...\n",
      "\n",
      "Training Accuracy = 0.988\n",
      "Validation Accuracy = 0.909\n",
      "\n",
      "EPOCH 42 ...\n",
      "\n",
      "Training Accuracy = 0.988\n",
      "Validation Accuracy = 0.912\n",
      "\n",
      "EPOCH 43 ...\n",
      "\n",
      "Training Accuracy = 0.989\n",
      "Validation Accuracy = 0.917\n",
      "\n",
      "EPOCH 44 ...\n",
      "\n",
      "Training Accuracy = 0.988\n",
      "Validation Accuracy = 0.918\n",
      "\n",
      "EPOCH 45 ...\n",
      "\n",
      "Training Accuracy = 0.989\n",
      "Validation Accuracy = 0.912\n",
      "\n",
      "EPOCH 46 ...\n",
      "\n",
      "Training Accuracy = 0.987\n",
      "Validation Accuracy = 0.921\n",
      "\n",
      "EPOCH 47 ...\n",
      "\n",
      "Training Accuracy = 0.990\n",
      "Validation Accuracy = 0.924\n",
      "\n",
      "EPOCH 48 ...\n",
      "\n",
      "Training Accuracy = 0.990\n",
      "Validation Accuracy = 0.911\n",
      "\n",
      "EPOCH 49 ...\n",
      "\n",
      "Training Accuracy = 0.990\n",
      "Validation Accuracy = 0.927\n",
      "\n",
      "EPOCH 50 ...\n",
      "\n",
      "Training Accuracy = 0.991\n",
      "Validation Accuracy = 0.921\n",
      "\n",
      "EPOCH 51 ...\n",
      "\n",
      "Training Accuracy = 0.991\n",
      "Validation Accuracy = 0.922\n",
      "\n",
      "EPOCH 52 ...\n",
      "\n",
      "Training Accuracy = 0.991\n",
      "Validation Accuracy = 0.933\n",
      "\n",
      "EPOCH 53 ...\n",
      "\n",
      "Training Accuracy = 0.992\n",
      "Validation Accuracy = 0.924\n",
      "\n",
      "EPOCH 54 ...\n",
      "\n",
      "Training Accuracy = 0.992\n",
      "Validation Accuracy = 0.927\n",
      "\n",
      "EPOCH 55 ...\n",
      "\n",
      "Training Accuracy = 0.991\n",
      "Validation Accuracy = 0.924\n",
      "\n",
      "EPOCH 56 ...\n",
      "\n",
      "Training Accuracy = 0.992\n",
      "Validation Accuracy = 0.932\n",
      "\n",
      "EPOCH 57 ...\n",
      "\n",
      "Training Accuracy = 0.992\n",
      "Validation Accuracy = 0.926\n",
      "\n",
      "EPOCH 58 ...\n",
      "\n",
      "Training Accuracy = 0.991\n",
      "Validation Accuracy = 0.924\n",
      "\n",
      "EPOCH 59 ...\n",
      "\n",
      "Training Accuracy = 0.993\n",
      "Validation Accuracy = 0.926\n",
      "\n",
      "EPOCH 60 ...\n",
      "\n",
      "Training Accuracy = 0.994\n",
      "Validation Accuracy = 0.929\n",
      "\n",
      "Model saved\n"
     ]
    }
   ],
   "source": [
    "### Train your model here.\n",
    "\n",
    "with tf.Session() as sess:\n",
    "    sess.run(tf.global_variables_initializer())\n",
    "    num_examples = len(X_train)\n",
    "    \n",
    "    print(\"Training...\")\n",
    "    print()\n",
    "    for i in range(EPOCHS):\n",
    "        X_train, y_train = shuffle(X_train, y_train)\n",
    "        for offset in range(0, num_examples, BATCH_SIZE):\n",
    "            end = offset + BATCH_SIZE\n",
    "            batch_x, batch_y = X_train[offset:end], y_train[offset:end]\n",
    "            sess.run(training_operation, feed_dict={x: batch_x, y: batch_y, keep_prob: 0.5})\n",
    "        \n",
    "        # Calculate and report the validation accuracy \n",
    "        training_accuracy = evaluate(X_train, y_train)\n",
    "        validation_accuracy = evaluate(X_valid, y_valid)\n",
    "\n",
    "        print(\"EPOCH {} ...\".format(i+1))\n",
    "        print()   \n",
    "        print(\"Training Accuracy = {:.3f}\".format(training_accuracy))\n",
    "     \n",
    "        #print(\"EPOCH {} ...\".format(i+1))\n",
    "        print(\"Validation Accuracy = {:.3f}\".format(validation_accuracy))\n",
    "        print()\n",
    "        \n",
    "    # Save the model    \n",
    "    saver.save(sess, './traffic_signs')\n",
    "    print(\"Model saved\")\n",
    "\n",
    "### Calculate and report the accuracy on the training and validation set.\n",
    "### Once a final model architecture is selected, \n",
    "### the accuracy on the test set should be calculated and reported as well.\n",
    "### Feel free to use as many code cells as needed."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Step 2.5: Test a Model on New Images"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 110,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "INFO:tensorflow:Restoring parameters from ./traffic_signs\n",
      "Test Set Accuracy = 0.050\n"
     ]
    }
   ],
   "source": [
    "# Now (drumroll) evaluate the accuracy of the model on the test dataset\n",
    "\n",
    "with tf.Session() as sess:\n",
    "    sess.run(tf.global_variables_initializer())\n",
    "    saver2 = tf.train.import_meta_graph('./traffic_signs.meta')\n",
    "    saver2.restore(sess, \"./traffic_signs\")\n",
    "    test_accuracy = evaluate(X_test, y_test)\n",
    "    print(\"Test Set Accuracy = {:.3f}\".format(test_accuracy))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "---\n",
    "\n",
    "## Step 3: Test a Model on New Images\n",
    "\n",
    "To give yourself more insight into how your model is working, download at least five pictures of German traffic signs from the web and use your model to predict the traffic sign type.\n",
    "\n",
    "You may find `signnames.csv` useful as it contains mappings from the class id (integer) to the actual sign name."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Load and Output the Images"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 111,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "14\n",
      "1\n",
      "25\n",
      "9\n",
      "5\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f75fa7a29b0>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f75fa353518>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f75fa028908>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f75e4cab588>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f75e4bf64a8>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "### Load the images and plot them here.\n",
    "### Feel free to use as many code cells as needed.\n",
    "\n",
    "### Load the images and plot them here.\n",
    "### Load and output the web images\n",
    "from scipy import misc\n",
    "import imageio\n",
    "\n",
    "# Create list with downloaded images\n",
    "image_features = []\n",
    "for i in range(1,6):\n",
    "    # Save image data as ndarrays in list\n",
    "    #image_features.append(misc.imread(parent_dir + \"/traffic-signs-data/web_images/\" + str(i) + \".jpg\", mode='RGB'))\n",
    "    image_features.append(imageio.imread(\"./traffic-signs-data/online_files/\" + str(i) + \".jpg\"))\n",
    "    \n",
    "# Create ndarrays with image_features and labels list\n",
    "X_online_test = np.array(image_features)\n",
    "Y_online_test = np.array([14, 1, 25, 9, 5])\n",
    "\n",
    "# Check that the same amount of features and labels was stored\n",
    "assert(len(X_online_test) == len(Y_online_test))\n",
    "\n",
    "# Print out all images and the respective labels\n",
    "for i, im in enumerate (X_online_test):\n",
    "    print (Y_online_test[i])\n",
    "    image = im.squeeze()\n",
    "    plt.figure(figsize=(2,2))\n",
    "    plt.imshow(image, cmap=\"gray\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Predict the Sign Type for Each Image"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 112,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(5, 32, 32, 3)\n",
      "5 32 32 1\n",
      "Restoring the model . . . \n",
      "INFO:tensorflow:Restoring parameters from ./traffic_signs\n",
      "Model restored.\n",
      "Samples:  5\n",
      "label :  [ 7 12  8 30  8]\n",
      "Prediction :  [False False False False False]\n",
      "Probability :  [[-0.05272397  0.0200924  -0.02898298  0.01673755 -0.08419205 -0.03762679\n",
      "   0.03831628  0.06204474  0.04633746 -0.00369399  0.00028991 -0.03284062\n",
      "   0.04292487  0.00033031 -0.07380268  0.03232404  0.0106379  -0.02614592\n",
      "   0.05854928 -0.06415991 -0.02431366  0.05885797  0.01719164  0.02671637\n",
      "   0.00368808 -0.06297641 -0.01792141 -0.03138649 -0.04680558  0.04311337\n",
      "   0.04592644 -0.00433451 -0.03371209  0.01040761 -0.07567389  0.00718888\n",
      "   0.01283679 -0.01119118 -0.05361966  0.02946863  0.00955878  0.05358161\n",
      "   0.01561081]\n",
      " [-0.08777672  0.04671842 -0.03775029  0.0331738  -0.11082038 -0.05027482\n",
      "   0.08584332  0.06615224  0.07362001  0.00471378 -0.00890311 -0.03574736\n",
      "   0.08802235  0.021572   -0.10240909  0.06745846  0.02125342 -0.03268972\n",
      "   0.06655553 -0.06983723 -0.0063286   0.0763821  -0.01714872  0.03738204\n",
      "  -0.00049521 -0.09494743 -0.02475868 -0.06174196 -0.07132331  0.05949117\n",
      "   0.07527985 -0.00752712 -0.05320283  0.0195926  -0.11854727  0.01869976\n",
      "  -0.00885749 -0.00057224 -0.06994482  0.0433789   0.00977214  0.0757581\n",
      "   0.03878306]\n",
      " [-0.09376074  0.0560858  -0.03345569  0.0245378  -0.10693439 -0.05247346\n",
      "   0.08020743  0.05258867  0.08438073 -0.00241724  0.00581015 -0.03225713\n",
      "   0.06919475  0.02389145 -0.09105806  0.0638646   0.04512401 -0.04085054\n",
      "   0.04898861 -0.05798281 -0.00939433  0.06057328 -0.01228815  0.04343882\n",
      "  -0.00605242 -0.078105   -0.0126108  -0.06189059 -0.0695322   0.05294734\n",
      "   0.08094086 -0.00869423 -0.06637179  0.01607309 -0.1014633   0.03004041\n",
      "  -0.00274768 -0.00064941 -0.05030634  0.021656    0.0078701   0.06637596\n",
      "   0.04310768]\n",
      " [-0.06790014  0.05463304 -0.03993287  0.01449109 -0.10981572 -0.04017065\n",
      "   0.06604658  0.06630396  0.06010216  0.00708817  0.00284931 -0.02451229\n",
      "   0.06885841  0.030113   -0.07616169  0.04884559  0.03089231 -0.02948997\n",
      "   0.04251918 -0.05742372 -0.02047449  0.06624461 -0.01597602  0.05114175\n",
      "  -0.00209544 -0.08034035 -0.02445792 -0.05671862 -0.0660364   0.04063787\n",
      "   0.07529487 -0.00217792 -0.07658137  0.01589962 -0.09525847  0.00281279\n",
      "  -0.011819    0.00988896 -0.05837277  0.01057923  0.01024974  0.07154107\n",
      "   0.03972166]\n",
      " [-0.0990802   0.06089159 -0.03384258  0.0196156  -0.11072821 -0.0348698\n",
      "   0.07570217  0.0534768   0.07912411  0.01047641 -0.00279518 -0.03494272\n",
      "   0.07616524  0.03378806 -0.10314354  0.07545938  0.04195642 -0.04075868\n",
      "   0.05139469 -0.05371378 -0.01369004  0.06562958 -0.00595029  0.03812341\n",
      "  -0.00747221 -0.10210795 -0.02265135 -0.07147704 -0.06164541  0.05473521\n",
      "   0.07781244 -0.00700341 -0.05928572  0.03739    -0.11872007  0.02254168\n",
      "  -0.01066274 -0.01003572 -0.05917569  0.02621492  0.00333758  0.06409727\n",
      "   0.05332711]]\n",
      "Labels :  [ 7 12  8 30  8]\n"
     ]
    }
   ],
   "source": [
    "### Feel free to use as many code cells as needed.\n",
    "# Covert to Grayscale & Normalize\n",
    "print(X_online_test.shape)\n",
    "\n",
    "def conv_rgb2gray(rgb):\n",
    "    #conv_rgb2gray\n",
    "    return np.dot(rgb, [0.299, 0.587, 0.114])\n",
    "\n",
    "if (X_online_test.shape[3] == 3):\n",
    "    # Convert to Grayscale\n",
    "    X_online_test_gray = conv_rgb2gray(X_online_test)\n",
    "    \n",
    "    # Normalize Grayscale Images\n",
    "    from sklearn import preprocessing\n",
    "    \n",
    "    for i, picture in enumerate(X_online_test_gray):\n",
    "        X_online_test_gray[i] = preprocessing.normalize(picture, norm='l2', axis=1, copy=True, return_norm=False)\n",
    "    \n",
    "    # Reshape Grayscale Pictures (Add Dimension 1)\n",
    "    X_online_test_norm = X_online_test_gray.reshape(X_online_test.shape[0], X_online_test.shape[1], X_online_test.shape[2], 1)\n",
    "    print(X_online_test.shape[0], X_online_test.shape[1], X_online_test.shape[2], 1)\n",
    "    X_online_test = X_online_test_norm\n",
    "    #X_online_test = X_online_test.astype(np.float32)\n",
    "    \n",
    "    # Save Variable Image Depth\n",
    "    image_depth = X_test.shape[3]\n",
    "\n",
    "\n",
    "### Run the predictions here and use the model to output the prediction for each image.\n",
    "### Make sure to pre-process the images with the same pre-processing pipeline used earlier.\n",
    "\n",
    "def prediction(X_data, y_data):\n",
    "    num_examples = int(len(X_data))\n",
    "    print (\"Samples: \", num_examples)\n",
    "    sess = tf.get_default_session()\n",
    "    \"\"\"\n",
    "    #for offset in range(0, num_examples, BATCH_SIZE):\n",
    "    #for offset in range(0, num_examples):\n",
    "    #batch_x, batch_y = X_data[offset:offset+BATCH_SIZE], y_data[offset:offset+BATCH_SIZE]\n",
    "    batch_x, batch_y = X_data, y_data\n",
    "    \"\"\"\n",
    "    for offset in range(0, num_examples, BATCH_SIZE):\n",
    "    #for offset in range(0, num_examples):\n",
    "        batch_x, batch_y = X_data[offset:offset+BATCH_SIZE], y_data[offset:offset+BATCH_SIZE]\n",
    "    #batch_x, batch_y = X_data, y_data\n",
    "    with tf.Session() as sess:\n",
    "        sess.run(tf.global_variables_initializer())\n",
    "        predict = sess.run(correct_prediction, feed_dict={x: batch_x, y: batch_y, keep_prob: 1.0})\n",
    "        #print (\"prediction : \", predict)\n",
    "        label = sess.run(tf.argmax(logits, 1), feed_dict={x: batch_x, y: batch_y, keep_prob: 1.0})\n",
    "        probabilities = sess.run(logits, feed_dict={x: batch_x, y: batch_y, keep_prob: 1.0})\n",
    "        print (\"label : \", label)\n",
    "        #print (\"probabilities : \", probabilities)\n",
    "    return predict, probabilities, label\n",
    "\n",
    "# Open session with restored model\n",
    "with tf.Session() as sess:\n",
    "    #sess.run(tf.global_variables_initializer())\n",
    "    # Restore model\n",
    "    print(\"Restoring the model . . . \")\n",
    "    saver.restore(sess, './traffic_signs')\n",
    "    print(\"Model restored.\")\n",
    "    \n",
    "    # Verify accuracy of the trained model via test data\n",
    "    pred, prob, label = prediction(X_online_test, Y_online_test)\n",
    "    print(\"Prediction : \", pred)\n",
    "    print(\"Probability : \", prob)\n",
    "    print(\"Labels : \", label)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Analyze Performance"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 113,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Testing...\n",
      "EPOCH 60 ...\n",
      "Test Accuracy = 0.007\n",
      "\n",
      "Model saved\n"
     ]
    }
   ],
   "source": [
    "### Train your model here.\n",
    "\n",
    "### Calculate and report the accuracy on the training and validation set.\n",
    "### Once a final model architecture is selected, \n",
    "### the accuracy on the test set should be calculated and reported as well.\n",
    "### Feel free to use as many code cells as needed.\n",
    "\n",
    "### Validate your model here.\n",
    "rate=0.0009\n",
    "\n",
    "with tf.Session() as sess:\n",
    "    sess.run(tf.global_variables_initializer())   \n",
    "    print(\"Testing...\")\n",
    "    for i in range(EPOCHS):\n",
    "        #X_test, y_test = shuffle(X_test, y_test)\n",
    "        \n",
    "        # Calculate and report the validation accuracy \n",
    "        validation_accuracy = evaluate(X_test, y_test)\n",
    "    print(\"EPOCH {} ...\".format(i+1))\n",
    "    print(\"Test Accuracy = {:.3f}\".format(validation_accuracy))\n",
    "    print()       \n",
    "        \n",
    "    # Save the model    \n",
    "    saver.save(sess, './traffic_signs')\n",
    "    print(\"Model saved\")\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Output Top 5 Softmax Probabilities For Each Image Found on the Web"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "For each of the new images, print out the model's softmax probabilities to show the **certainty** of the model's predictions (limit the output to the top 5 probabilities for each image). [`tf.nn.top_k`](https://www.tensorflow.org/versions/r0.12/api_docs/python/nn.html#top_k) could prove helpful here. \n",
    "\n",
    "The example below demonstrates how tf.nn.top_k can be used to find the top k predictions for each image.\n",
    "\n",
    "`tf.nn.top_k` will return the values and indices (class ids) of the top k predictions. So if k=3, for each sign, it'll return the 3 largest probabilities (out of a possible 43) and the correspoding class ids.\n",
    "\n",
    "Take this numpy array as an example. The values in the array represent predictions. The array contains softmax probabilities for five candidate images with six possible classes. `tf.nn.top_k` is used to choose the three classes with the highest probability:\n",
    "\n",
    "```\n",
    "# (5, 6) array\n",
    "a = np.array([[ 0.24879643,  0.07032244,  0.12641572,  0.34763842,  0.07893497,\n",
    "         0.12789202],\n",
    "       [ 0.28086119,  0.27569815,  0.08594638,  0.0178669 ,  0.18063401,\n",
    "         0.15899337],\n",
    "       [ 0.26076848,  0.23664738,  0.08020603,  0.07001922,  0.1134371 ,\n",
    "         0.23892179],\n",
    "       [ 0.11943333,  0.29198961,  0.02605103,  0.26234032,  0.1351348 ,\n",
    "         0.16505091],\n",
    "       [ 0.09561176,  0.34396535,  0.0643941 ,  0.16240774,  0.24206137,\n",
    "         0.09155967]])\n",
    "```\n",
    "\n",
    "Running it through `sess.run(tf.nn.top_k(tf.constant(a), k=3))` produces:\n",
    "\n",
    "```\n",
    "TopKV2(values=array([[ 0.34763842,  0.24879643,  0.12789202],\n",
    "       [ 0.28086119,  0.27569815,  0.18063401],\n",
    "       [ 0.26076848,  0.23892179,  0.23664738],\n",
    "       [ 0.29198961,  0.26234032,  0.16505091],\n",
    "       [ 0.34396535,  0.24206137,  0.16240774]]), indices=array([[3, 0, 5],\n",
    "       [0, 1, 4],\n",
    "       [0, 5, 1],\n",
    "       [1, 3, 5],\n",
    "       [1, 4, 3]], dtype=int32))\n",
    "```\n",
    "\n",
    "Looking just at the first row we get `[ 0.34763842,  0.24879643,  0.12789202]`, you can confirm these are the 3 largest probabilities in `a`. You'll also notice `[3, 0, 5]` are the corresponding indices."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 114,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "top 5 :  TopKV2(values=array([[ 0.06204474,  0.05885797,  0.05854928],\n",
      "       [ 0.08802235,  0.08584332,  0.0763821 ],\n",
      "       [ 0.08438073,  0.08094086,  0.08020743],\n",
      "       [ 0.07529487,  0.07154107,  0.06885841],\n",
      "       [ 0.07912411,  0.07781244,  0.07616524]], dtype=float32), indices=array([[ 7, 21, 18],\n",
      "       [12,  6, 21],\n",
      "       [ 8, 30,  6],\n",
      "       [30, 41, 12],\n",
      "       [ 8, 30, 12]], dtype=int32))\n"
     ]
    }
   ],
   "source": [
    "### Print out the top five softmax probabilities for the predictions on the German traffic sign images found on the web. \n",
    "### Feel free to use as many code cells as needed.\n",
    "with tf.Session() as sess:\n",
    "    sess.run(tf.global_variables_initializer())\n",
    "    top_5 = sess.run(tf.nn.top_k(tf.constant(prob), k=3))\n",
    "print(\"top 5 : \", top_5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 115,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'\\nprint(len(X_select_rgb))\\n\\nfor image in select_images:\\n    X_select_rgb = np.sum(image, axis=0, keepdims=True)\\n    \\nselect_images_normalized = (X_select_rgb - 128)/128\\n\\nprint(X_select_rgb.shape)\\n'"
      ]
     },
     "execution_count": 115,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAQcAAACQCAYAAAAFv67oAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDIuMS4wLCBodHRwOi8vbWF0cGxvdGxpYi5vcmcvpW3flQAAD4JJREFUeJzt3V9sFeeZx/Hvs3EgwjS0EEsBjEQsJ/wxsqz6EFJpL6oUicQSJ6rq8ucihbLBoJKttDe7W1UiIjfLNQtqlrLYJVIg2+QCN0EglQollZaS41XLgrIFO3aLHaTYVI2qUhmMnr04Axj7hTPAjOd4+H2kI/n1vBrenxkezp/x+5i7IyIy0d9lvQARqU4qDiISpOIgIkEqDiISpOIgIkEqDiISVLE4mNlBM/vCzM7d5biZ2R4z6zWzs2b29eSXmR7lUz4Ji/PMoQt46R7HXwaejR4dwE8efllTqgvlUz6ZpGJxcPePgD/dY8orwCEvOw181czmJ7XAtCmf8klYEu85LAQujRsPRt/LC+Wb3vKeLzUW5/ZpM1sMfODuKwLHPgT+zd1/HY1PAv/s7j2BuR2Un9pRW1vbunTp0odafFJGR0fp7e2lqalp0rGLFy8yf/58Zs+eDcCFCxdYuHAhtbW1k+YODw8zMjICgJmhfFMj6XxXr14dq62tramWfEnr6ekZcfe6ihPdveIDWAycu8ux/wA2jhv/Hphf6Zytra1eLfr7+72pqSl4rKOjw995551b4+eee84///zziudUvqmTdD6gVE35kgaUPMa/+yReVnQD34veFX4B+NLdLydw3qpQLBY5dOgQ7s7p06eZM2cO8+fn5yWr8snd1FSaYGaHgW8CT5nZIPAG8DiAu78FHAPagF7gKvD9tBabho0bN3Lq1ClGRkaor69n165dXL9+HYDt27fT1tbGsWPHaGxsZNasWXR2dma84vujfNM7X5ZiveeQhkKh4KVSKZM/eyoUCgWUb3oys57W1tbWPOdz90KlebpDUkSCVBxEJEjFQUSCVBxEJEjFQUSCVBxEJEjFQUSCVBxEJEjFQUSCVBxEJEjFQUSCVBxEJEjFQUSCVBxEJEjFQUSCVBxEJChWcTCzl8zs91FjkH8NHN9sZsNm9tvo8VryS03P8ePHWbJkCY2NjezevXvS8a6uLurq6mhpaaGlpYUDBw5ksMoHk+dskP98maq0ySTwGNAHNAAzgN8ByyfM2QzsjbNp5c1HtWzgOTY25g0NDd7X1+ejo6Pe3Nzs58+fv2NOZ2en79ix477OWw350srmnu98aIPZ2BvMPg/0uvtn7n4NOEK5UUgunDlzhsbGRhoaGpgxYwYbNmzg6NGjWS8rEXnOBvnPl7U4xSFuU5DvRL0I3zOzRYmsbgoMDQ2xaNHt5dbX1zM0NDRp3vvvv09zczPt7e1cunRp0vFqlOdskP98WYtTHCzwvYm70v4CWOzuzcAvgZ8FT2TWYWYlMysNDw/f30pT4oENds3ujLx27VoGBgY4e/Ysq1evZtOmTcFz7d+/n0KhQKFQoBryJZkNHp18wLJqyJe1OMVhEBj/TKAe+Hz8BHe/4u6j0fCnQGvoRO6+390L7l6oq6vccGcq1NfX3/G/yeDgIAsWLLhjzrx585g5cyYAW7dupadnUjMvADo6OiiVSpRKJaohX5LZ4NHJB3xaDfmyFqc4fAI8a2bPmNkMYAPlRja3TGhMWgQ+TW6J6Vq5ciUXL16kv7+fa9euceTIEYrF4h1zLl++3aOnu7ubZcuWTfUyH0ies0H+82WtYlMbdx8zs9eBE5Q/uTjo7ufN7E3K73p2Az80syIwRrnj8eYU15yompoa9u7dy5o1a7hx4wZbtmyhqamJnTt3UigUKBaL7Nmzh+7ubmpqapg7dy5dXV1ZLzuWPGeD/OfLmprapCTPTV8g3/nU1KZMd0iKSJCKg4gEqTiISJCKg4gEqTiISJCKg4gEqTiISJCKg4gEqTiISJCKg4gEqTiISJCKg4gEqTiISJCKg4gEqTiISJCKg4gEJdXUZqaZvRsd/42ZLU56oWmq1BhldHSU9evX09jYyKpVqxgYGJj6RT6EPOfLc7bMVWpsQbymNj8A3oq+3gC8W+m81dI0JE5jlH379vm2bdvc3f3w4cO+bt26iudVvvSllQ01tUm0qc0r3N6O/j3gWzZxj/AqFacxytGjR29tad7e3s7JkyeD26JXozzny3O2alBxD0kzawdecvfXovGrwCp3f33cnHPRnMFo3BfNGZlwrg6gIxquAM4lFeQhfA14EvhDNJ4LzAb+OG5OE3ABuB6NVwD/R3lD3fGeAm7uaT4LuPs+6FMnz/mSzAa38z0Rza+G6zMNS9z9KxVnVXpqAXwXODBu/Crw7xPmnAfqx437gHkVzhvrqU3ajxTz/TXrbHnPl+a1WS3XZ0o/t8ReVlRsajN+jpnVAHMob1E/HSjf9M2X52yZS6SpTTS+2WesHfiVRyVqGlC+6Zsvz9myF/NpSBvl1219wI+j770JFKOvnwB+DvQCZ4CGGOfsyPrpVcr53s4616OQL61rs5quzxR+ZrGyZdbURkSqm+6QFJGgisXBzA6a2RfRx5Wh42Zme6K7I8+a2deTX2Z6lE/5JCzOM4cu4KV7HH8ZeDZ6dAA/qXTCSrdjT7EuEsxnZifMbMzMRqsgGyhf7HxRoflzlK0ars1EVSqkE1UsDu7+Eff+6OcV4JCXnQa+ambz77HAx4B9lP/SlgMbzWx5nMWmIcl8UbYVwLcpvwGWaTZQPu7v+jwE/AUYoAquzRR0ce9CeodYb0hGv0j1gbuvCBz7ANjt7r+OxieBf3H3SS2Kozsk/wlYUFtb++TSpUvjrjNVo6Oj9Pb20tTUNOlYb28vTz/9NLNnzwbgwoULLFy4kNra2klzh4eHGRkp3xRqZijf1Eg639WrV6mtra2afEnr6em54e41FSfG/OhjMXDuLsc+BP5+3Pgk0HqPc7UDB6rpF1v6+/u9qakpeKytrc0//vjjW+MXX3zRS6VSxXMq39RJOh/wt2rKlzTgbx7j330Sn1bEuUttvGnxC1k31dfXc+nSpVvjwcFBFixYkOGKkqV8cjdJFIdu4HvRu8IvAF+6++V7zJ9YTKpasVjk0KFDuDunT59mzpw5zJ9/17dUph3lk7up+LrDzA4D3wSeMrNB4A3gcQB3fws4RvkutV7gKvD9Cqf8hPI7x1Vh48aNnDp1ipGREerr69m1axfXr5d/gW/79u20tbVx7NgxGhsbmTVrFp2dnRmv+P4o3wPlm1bPbtOSyR2SZtbW2tr6Yak06T3L3CgUCijf9GRmtLa25jmfU37p/4a7/+fd5mVyh6S7H8vizxWJKet9KtL2P+5ef6/CALp9WkTuQsVBRIJUHEQkSMVBRIJUHEQkSMVBRIJUHEQkSMVBRIJUHEQkSMVBRIJUHEQkSMVBRIJUHEQkSMVBRIJiFYdKW8mb2WYzGzaz30aP15JfanqOHz/OkiVLaGxsZPfu3ZOOd3V1UVdXR0tLCy0tLRw4cCCDVT6YPGeD/OfLVKVNJoHHKPchbABmAL8Dlk+YsxnYG2fTypuPatnAc2xszBsaGryvr89HR0e9ubnZz58/f8eczs5O37Fjx32dtxrypZXNPd/5gFI15EsLUPKENph9Huh198/c/RpwhHIvgFw4c+YMjY2NNDQ0MGPGDDZs2MDRo0ezXlYi8pwN8p8va3GKw0Lg0rjxYPS9ib4TtRt7z8ymzQayQ0NDLFp0e7n19fUMDQ1Nmvf+++/T3NxMe3v7HbsZV7M8Z4P858tanOIQ2mxz4saTvwAWu3sz8EvgZ8ETmXWYWcnMSsPDw/e30pR4YA9Nszsjr127loGBAc6ePcvq1avZtGlT8Fz79++nUChQKBSohnxJZoNHJx+wrBryZS1OcajYl8Ldr7j7aDT8KdAaOpG773f3grsX6urqHmS9iYvT12DevHnMnDkTgK1bt9LTE95isKOjg1KpRKlUohryJZkNHp18wKfVkC9rcYrDJ8CzZvaMmc0ANlDuVXHLhN6DReDT5JaYrpUrV3Lx4kX6+/u5du0aR44coVgs3jHn8uXbbTi6u7tZtmzZVC/zgeQ5G+Q/X9Yq9q1w9zEzex04QfmTi4Puft7M3qT8rmc38EMzKwJjlJuabk5xzYmqqalh7969rFmzhhs3brBlyxaamprYuXMnhUKBYrHInj176O7upqamhrlz59LV1ZX1smPJczbIf76sZdK3AqBQKHhe+wJAvvs6QL7zmVlPa2tra57zuXuh0jzdISkiQSoOIhKk4iAiQSoOIhKk4iAiQSoOIhKk4iAiQSoOIhKk4iAiQSoOIhKk4iAiQSoOIhKk4iAiQSoOIhKk4iAiQSoOIhKUVFObmWb2bnT8N2a2OOmFpqlSY5TR0VHWr19PY2Mjq1atYmBgYOoX+RDynC/P2TJXqbEF8Zra/AB4K/p6A/BupfNWS9OQOI1R9u3b59u2bXN398OHD/u6desqnlf50pdWNtTUJtGmNq9wezv694Bv2cQ9wqtUnMYoR48evbWleXt7OydPngxui16N8pwvz9mqQVJNbW7Ncfcx4EtgXhILTFucxijj59TU1DBnzhyuXLkypet8UHnOl+ds1aDiBrNm9l1gjbu/Fo1fBZ53938cN+d8NGcwGvdFc65MOFcH0BENVwDnkgryEL4GPAn8IRrPBWq5syA2AReA69F4BeXt929MONdTwM2GB7OAuzdJmDp5zpdkNrid74lofjVcn2lY4u5fqTir0usO4BvAiXHjHwE/mjDnBPCN6OsaYISo8NzjvLFe96T9SDHfX7POlvd8aV6b1XJ9pvRzS+w9h4pNbaLxzT5j7cCvPFrFNKB80zdfnrNlL2alaaP81KwP+HH0vTeBYvT1E8DPgV7gDNCQVPWaokqaRr7M/2d9FPKldW1W0/WZws8sVrbMmtqYWYe778/kD58CZva2u7+a9TrSkud80Xtj5PX6jPtvL7PiICLVTbdPi0hQJsWh0u3Y05mZnTCzMTMbzVs2yHc+MztoZn+OsuXx2jxoZl+YWayPaKe8OJjZY8A+4GVgObDRzJZP9TrSEGVbAXyb8htguckG+c8HHAL+AgyQs2sz0gW8FHdyFs8c4tyOPV09T/nGmf8FnHxlg/znGwU+A67n8NrE3T8C/hR3fhbFIc7t2NNVnrPBo5Hv8rhx3vLdlyyKQ+gXsvLykUmes4HyPVKyKA6DwKJx43rg8wzWkYY8Z4NHI9/8ceO85bsvWRSHOLe8TlefAM9SvqiMfGWDRyPfM8DjObw279uUFwcv/0r365R/IeZT4L/c/fxUryMNUbY/Aqcov9u9GHghwyUlKu/5gLeB2cBzwFWgLy/XJoCZHQb+G1hiZoNm9g/3nK87JEUkRHdIikiQioOIBKk4iEiQioOIBKk4iEiQioOIBKk4iEiQioOIBP0/6nlDu3M/gkoAAAAASUVORK5CYII=\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f75fad8cc18>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "### Load the images and plot them here.\n",
    "### Feel free to use as many code cells as needed.\n",
    "\n",
    "#reading in an image\n",
    "import os\n",
    "import matplotlib.image as mpimg\n",
    "import cv2\n",
    "\n",
    "fig, axs = plt.subplots(2,4, figsize=(4, 2))\n",
    "fig.subplots_adjust(hspace = .2, wspace=.001)\n",
    "axs = axs.ravel()\n",
    "\n",
    "select_images = []\n",
    "select_images_gray = []\n",
    "\n",
    "def conv_rgb2gray(rgb):\n",
    "    return np.dot(rgb, [0.299, 0.587, 0.114])\n",
    "\n",
    "for i, img in enumerate(os.listdir('traffic-signs-data/online_files/')):\n",
    "    image = cv2.imread('traffic-signs-data/online_files/' + img)\n",
    "    #print(len(image))\n",
    "    #axs[i].axis('off')\n",
    "    #axs[i].imshow(cv2.cvtColor(image, cv2.COLOR_BGR2RGB))\n",
    "    select_images.append(image)\n",
    "    #print(\"-----------------------\")\n",
    "    #select_images_gray.append(conv_rgb2gray(image))\n",
    "\n",
    "# Convert to grayscale\n",
    "select_images = np.asarray(select_images)\n",
    "X_select_rgb = select_images\n",
    "#X_select_gry = np.sum(X_select_rgb/3, axis=3, keepdims=True)\n",
    "\n",
    "\"\"\"\n",
    "print(len(X_select_rgb))\n",
    "\n",
    "for image in select_images:\n",
    "    X_select_rgb = np.sum(image, axis=0, keepdims=True)\n",
    "    \n",
    "select_images_normalized = (X_select_rgb - 128)/128\n",
    "\n",
    "print(X_select_rgb.shape)\n",
    "\"\"\""
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Additional work needed getting errors and will continue to work on this"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 116,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "INFO:tensorflow:Restoring parameters from ./traffic_signs\n",
      "6\n",
      "5\n"
     ]
    },
    {
     "ename": "ValueError",
     "evalue": "Cannot feed value of shape (1, 32, 3) for Tensor 'Placeholder_17:0', which has shape '(?, 32, 32, 1)'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "\u001b[0;32m<ipython-input-116-3fa232055827>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     11\u001b[0m     \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_select_rgb\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     12\u001b[0m     \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mselect_labels\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 13\u001b[0;31m     \u001b[0mselect_accuracy\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mevaluate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mselect_images_normalized\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mselect_labels\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     14\u001b[0m     \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Test Set Accuracy = {:.3f}\"\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mformat\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mselect_accuracy\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     15\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Done\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m<ipython-input-27-ac494c045310>\u001b[0m in \u001b[0;36mevaluate\u001b[0;34m(X_data, y_data)\u001b[0m\n\u001b[1;32m     10\u001b[0m     \u001b[0;32mfor\u001b[0m \u001b[0moffset\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mnum_examples\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mBATCH_SIZE\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     11\u001b[0m         \u001b[0mbatch_x\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mbatch_y\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mX_data\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0moffset\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0moffset\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0mBATCH_SIZE\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_data\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0moffset\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0moffset\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0mBATCH_SIZE\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 12\u001b[0;31m         \u001b[0maccuracy\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0msess\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrun\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0maccuracy_operation\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfeed_dict\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m{\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mbatch_x\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mbatch_y\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkeep_prob\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0;36m1.0\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     13\u001b[0m         \u001b[0mtotal_accuracy\u001b[0m \u001b[0;34m+=\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0maccuracy\u001b[0m \u001b[0;34m*\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mbatch_x\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     14\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mtotal_accuracy\u001b[0m \u001b[0;34m/\u001b[0m \u001b[0mnum_examples\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/opt/conda/lib/python3.6/site-packages/tensorflow/python/client/session.py\u001b[0m in \u001b[0;36mrun\u001b[0;34m(self, fetches, feed_dict, options, run_metadata)\u001b[0m\n\u001b[1;32m    893\u001b[0m     \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    894\u001b[0m       result = self._run(None, fetches, feed_dict, options_ptr,\n\u001b[0;32m--> 895\u001b[0;31m                          run_metadata_ptr)\n\u001b[0m\u001b[1;32m    896\u001b[0m       \u001b[0;32mif\u001b[0m \u001b[0mrun_metadata\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    897\u001b[0m         \u001b[0mproto_data\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtf_session\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mTF_GetBuffer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrun_metadata_ptr\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;32m/opt/conda/lib/python3.6/site-packages/tensorflow/python/client/session.py\u001b[0m in \u001b[0;36m_run\u001b[0;34m(self, handle, fetches, feed_dict, options, run_metadata)\u001b[0m\n\u001b[1;32m   1098\u001b[0m                 \u001b[0;34m'Cannot feed value of shape %r for Tensor %r, '\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1099\u001b[0m                 \u001b[0;34m'which has shape %r'\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1100\u001b[0;31m                 % (np_val.shape, subfeed_t.name, str(subfeed_t.get_shape())))\n\u001b[0m\u001b[1;32m   1101\u001b[0m           \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgraph\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mis_feedable\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msubfeed_t\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1102\u001b[0m             \u001b[0;32mraise\u001b[0m \u001b[0mValueError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'Tensor %s may not be fed.'\u001b[0m \u001b[0;34m%\u001b[0m \u001b[0msubfeed_t\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
      "\u001b[0;31mValueError\u001b[0m: Cannot feed value of shape (1, 32, 3) for Tensor 'Placeholder_17:0', which has shape '(?, 32, 32, 1)'"
     ]
    }
   ],
   "source": [
    "### Run the predictions here.\n",
    "### Feel free to use as many code cells as needed.\n",
    "### Reviewer - Please pay additional attention here;  This is throwing errors\n",
    "#select_labels = [11, 3, 1, 12, 38, 34, 18, 25]\n",
    "select_labels = [14, 1, 25, 9, 5]\n",
    "\n",
    "with tf.Session() as sess:\n",
    "    sess.run(tf.global_variables_initializer())\n",
    "    saver3 = tf.train.import_meta_graph('./traffic_signs.meta')\n",
    "    saver3.restore(sess, \"./traffic_signs\")\n",
    "    print(len(X_select_rgb))\n",
    "    print(len(select_labels))\n",
    "    select_accuracy = evaluate(select_images_normalized, select_labels)\n",
    "    print(\"Test Set Accuracy = {:.3f}\".format(select_accuracy))\n",
    "print(\"Done\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Project Writeup\n",
    "\n",
    "Once you have completed the code implementation, document your results in a project writeup using this [template](https://github.com/udacity/CarND-Traffic-Sign-Classifier-Project/blob/master/writeup_template.md) as a guide. The writeup can be in a markdown or pdf file. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "> **Note**: Once you have completed all of the code implementations and successfully answered each question above, you may finalize your work by exporting the iPython Notebook as an HTML document. You can do this by using the menu above and navigating to  \\n\",\n",
    "    \"**File -> Download as -> HTML (.html)**. Include the finished document along with this notebook as your submission."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "---\n",
    "\n",
    "## Step 4 (Optional): Visualize the Neural Network's State with Test Images\n",
    "\n",
    " This Section is not required to complete but acts as an additional excersise for understaning the output of a neural network's weights. While neural networks can be a great learning device they are often referred to as a black box. We can understand what the weights of a neural network look like better by plotting their feature maps. After successfully training your neural network you can see what it's feature maps look like by plotting the output of the network's weight layers in response to a test stimuli image. From these plotted feature maps, it's possible to see what characteristics of an image the network finds interesting. For a sign, maybe the inner network feature maps react with high activation to the sign's boundary outline or to the contrast in the sign's painted symbol.\n",
    "\n",
    " Provided for you below is the function code that allows you to get the visualization output of any tensorflow weight layer you want. The inputs to the function should be a stimuli image, one used during training or a new one you provided, and then the tensorflow variable name that represents the layer's state during the training process, for instance if you wanted to see what the [LeNet lab's](https://classroom.udacity.com/nanodegrees/nd013/parts/fbf77062-5703-404e-b60c-95b78b2f3f9e/modules/6df7ae49-c61c-4bb2-a23e-6527e69209ec/lessons/601ae704-1035-4287-8b11-e2c2716217ad/concepts/d4aca031-508f-4e0b-b493-e7b706120f81) feature maps looked like for it's second convolutional layer you could enter conv2 as the tf_activation variable.\n",
    "\n",
    "For an example of what feature map outputs look like, check out NVIDIA's results in their paper [End-to-End Deep Learning for Self-Driving Cars](https://devblogs.nvidia.com/parallelforall/deep-learning-self-driving-cars/) in the section Visualization of internal CNN State. NVIDIA was able to show that their network's inner weights had high activations to road boundary lines by comparing feature maps from an image with a clear path to one without. Try experimenting with a similar test to show that your trained network's weights are looking for interesting features, whether it's looking at differences in feature maps from images with or without a sign, or even what feature maps look like in a trained network vs a completely untrained one on the same sign image.\n",
    "\n",
    "<figure>\n",
    " <img src=\"visualize_cnn.png\" width=\"380\" alt=\"Combined Image\" />\n",
    " <figcaption>\n",
    " <p></p> \n",
    " <p style=\"text-align: center;\"> Your output should look something like this (above)</p> \n",
    " </figcaption>\n",
    "</figure>\n",
    " <p></p> \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [],
   "source": [
    "### Visualize your network's feature maps here.\n",
    "### Feel free to use as many code cells as needed.\n",
    "\n",
    "# image_input: the test image being fed into the network to produce the feature maps\n",
    "# tf_activation: should be a tf variable name used during your training procedure that represents the calculated state of a specific weight layer\n",
    "# activation_min/max: can be used to view the activation contrast in more detail, by default matplot sets min and max to the actual min and max values of the output\n",
    "# plt_num: used to plot out multiple different weight feature map sets on the same block, just extend the plt number for each new feature map entry\n",
    "\n",
    "def outputFeatureMap(image_input, tf_activation, activation_min=-1, activation_max=-1 ,plt_num=1):\n",
    "    # Here make sure to preprocess your image_input in a way your network expects\n",
    "    # with size, normalization, ect if needed\n",
    "    # image_input =\n",
    "    # Note: x should be the same name as your network's tensorflow data placeholder variable\n",
    "    # If you get an error tf_activation is not defined it may be having trouble accessing the variable from inside a function\n",
    "    activation = tf_activation.eval(session=sess,feed_dict={x : image_input})\n",
    "    featuremaps = activation.shape[3]\n",
    "    plt.figure(plt_num, figsize=(15,15))\n",
    "    for featuremap in range(featuremaps):\n",
    "        plt.subplot(6,8, featuremap+1) # sets the number of feature maps to show on each row and column\n",
    "        plt.title('FeatureMap ' + str(featuremap)) # displays the feature map number\n",
    "        if activation_min != -1 & activation_max != -1:\n",
    "            plt.imshow(activation[0,:,:, featuremap], interpolation=\"nearest\", vmin =activation_min, vmax=activation_max, cmap=\"gray\")\n",
    "        elif activation_max != -1:\n",
    "            plt.imshow(activation[0,:,:, featuremap], interpolation=\"nearest\", vmax=activation_max, cmap=\"gray\")\n",
    "        elif activation_min !=-1:\n",
    "            plt.imshow(activation[0,:,:, featuremap], interpolation=\"nearest\", vmin=activation_min, cmap=\"gray\")\n",
    "        else:\n",
    "            plt.imshow(activation[0,:,:, featuremap], interpolation=\"nearest\", cmap=\"gray\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "anaconda-cloud": {},
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
